library(janitor) # for clean_names()
library(stringr)
# # demographics
# data_demographics_raw_messy <- read_csv("../data/raw/data_demographics_raw_messy.csv", skip = 2) |>
#   janitor::clean_names()
data_demographics_raw <- read_csv("../data/raw/data_demographics_raw.csv") |>
janitor::clean_names()
# self report measure
data_selfreport_raw <- read_csv("../data/raw/data_selfreport_raw.csv") |>
janitor::clean_names()
# affect attribution procedure
data_amp_raw <- read_csv("../data/raw/data_amp_raw.csv") |>
janitor::clean_names()
# do we have duplicate data
data_demographics_raw |>
count(subject) |>
arrange(desc(n))
dat_unique_id <- data_demographics_raw |>
rename(unique_id = subject) |>
count(unique_id) |>
filter(n == 2) |>
select(unique_id)
# wrangle the age data out of the raw
dat_age <- data_demographics_raw |>
# rename for clarity
rename(unique_id = subject, item = trialcode) |>
# select useful columns
select(unique_id, item, response) |>
# retain rows that we need
filter(item == "age") |>
rename(age = response) |>
# remove non-numbers or decimals from age
mutate(age = str_remove_all(age, "[^\\d.]"),  # retains only digits and decimal points
age = na_if(age, ""),
age = as.numeric(age)) |>
select(unique_id, age)
#select(-item) # alternative: negative selection
# wrangle the gender data out of the raw
dat_gender <- data_demographics_raw |>
# rename for clarity
rename(unique_id = subject, item = trialcode) |>
# select useful columns
select(unique_id, item, response) |>
# retain rows that we need
filter(item == "gender") |>
rename(gender = response) |>
# remove non-numbers or decimals from age
mutate(gender = str_to_lower(gender),
gender = str_remove_all(gender, "[\\d.]"),
gender = na_if(gender, ""),
gender = case_when(gender == "woman" ~ "female",
gender == "yes" ~ NA_character_,
gender == "man" ~ "male",
gender == "girl" ~ "female",
gender == "dude" ~ "male",
gender == "non binary" ~ "non-binary",
TRUE ~ gender)) |>
select(unique_id, gender)
# dat_unique_id
# dat_age
# dat_gender
# basic tidying
data_amp_tidied <- data_amp_raw |>
rename(unique_id = subject,
block_type = blockcode,
rt = latency) |>
select(unique_id, block_type, rt) |>
filter(block_type == "test")
# are there duplicates or incomplete data?
data_amp_tidied |>
count(unique_id, name = "n_trials") |>
count(n_trials, name = "n_participants") |>
arrange(desc(n_participants))
data_complete_amp <- data_amp_tidied |>
count(unique_id, name = "n_trials") |>
filter(n_trials == 72)
data_amp_tidied_complete <- data_amp_tidied |>
semi_join(data_complete_amp, by = "unique_id")
# are there duplicates or incomplete data?
# sanity check should have one row
data_amp_tidied_complete |>
count(unique_id, name = "n_trials") |>
count(n_trials, name = "n_participants") |>
arrange(desc(n_participants))
# rm(data_complete_amp) # remove from environment
data_amp_performance_criteria <- data_amp_tidied_complete |>
mutate(fast_trial = ifelse(rt < 100, 1, 0)) |>
# for each participant...
group_by(unique_id) |>
# ... summarize the percent of fast trials
summarise(percent_fast_trials = mean(fast_trial)*100) |>
# flag unique_ids that have too many fast trials
mutate(exclude_amp_performance = ifelse(percent_fast_trials > 10, "exclude", "include"))
View(data_selfreport_raw)
# basic tidying
data_selfreport_tidied <- data_selfreport_raw |>
rename(unique_id = subject,
item_type = trialcode) |>
select(unique_id, item_type, response) |>
filter(item_type != "instructions") |>
mutate(response = case_when(
!is.na(as.numeric(response)) ~ as.numeric(response),
TRUE ~ NA
))
View(data_selfreport_tidied)
#checking data-completness
completness_check <- data_selfreport_tidied |>
count(unique_id, name = "n_trials") |>
count(n_trials, name = "n_participants") |>
arrange(desc(n_participants)) #two participants have only 1 data entry
View(completness_check)
knitr::opts_chunk$set(message = FALSE,
warning = FALSE)
library(dplyr)
library(tidyr)
library(readr)
library(janitor) # for clean_names()
library(stringr)
# # demographics
# data_demographics_raw_messy <- read_csv("../data/raw/data_demographics_raw_messy.csv", skip = 2) |>
#   janitor::clean_names()
data_demographics_raw <- read_csv("../data/raw/data_demographics_raw.csv") |>
janitor::clean_names()
# self report measure
data_selfreport_raw <- read_csv("../data/raw/data_selfreport_raw.csv") |>
janitor::clean_names()
# affect attribution procedure
data_amp_raw <- read_csv("../data/raw/data_amp_raw.csv") |>
janitor::clean_names()
# basic tidying
data_selfreport_tidied <- data_selfreport_raw |>
rename(unique_id = subject,
item_type = trialcode) |>
select(unique_id, item_type, response) |>
filter(item_type != "instructions") |>
mutate(response = case_when(
!is.na(as.numeric(response)) ~ as.numeric(response),
TRUE ~ NA
))
#checking data-completness
completness_check <- data_selfreport_tidied |>
count(unique_id, name = "n_trials") |>
count(n_trials, name = "n_participants") |>
arrange(desc(n_participants)) #two participants have only 1 data entry
completness_check
View(completness_check)
# removing data
exclude_amp_completeness_raw <- data_selfreport_tidied |>
select(unique_id) |> #for overview, only the respective column is taken
count(unique_id, name = "n_selfreports") |> #count for the number of responses per id
filter(n_selfreports == 3)# #only unique_id's with the correct number of responses are kept (assumed it's 3)
View(exclude_amp_completeness_raw)
#removing data II
exclude_amp_completeness <- data_selfreport_tidied |>  semi_join(exclude_amp_completeness_raw, by = join_by(unique_id))
#sanity check
sanity_check <- exclude_amp_completeness |>
count(unique_id, name = "n_selfreports") |>
count(n_selfreports, name = "n_participants") |>
arrange(desc(n_participants))
View(sanity_check)
#Identifying values in the response row that ar not in between 1 and 7
response_amp_clean <- data_selfreport_tidied |>
group_by(unique_id) |>
mutate(exclude_list = ifelse(response %in% c(1:7), "include","exclude")) |>
ungroup()
View(response_amp_clean)
#Identifying values in the response row that ar not in between 1 and 7
response_amp_clean <- data_selfreport_tidied |>
group_by(unique_id) |>
mutate(exclude_list = ifelse(response %in% c(1:7), "include","exclude")) |>
ungroup()
#count the values
temp <- response_amp_clean |>
count(exclude_list)
#drop the values
response_amp_clean <- response_amp_clean |>
filter(exclude_list !="exclude")
#control
temp <- response_amp_clean |>
count(exclude_list)
#count the values
temp <- response_amp_clean |>
count(exclude_list)
View(temp)
#drop the values
response_amp_clean <- response_amp_clean |>
filter(exclude_list !="exclude")
#control
temp <- response_amp_clean |>
count(exclude_list)
#Identifying values in the response row that ar not in between 1 and 7
response_amp_clean <- data_selfreport_tidied |>
group_by(unique_id) |>
mutate(exclude_list = ifelse(response %in% c(1:7), "include","exclude")) |>
ungroup()
#count the values
temp <- response_amp_clean |>
count(exclude_list)
#drop the values
response_amp_clean <- response_amp_clean |>
filter(exclude_list !="exclude")
#control
temp <- response_amp_clean |>
count(exclude_list)
#Identifying values in the response row that ar not in between 1 and 7
response_amp_clean <- data_selfreport_tidied |>
group_by(unique_id) |>
mutate(exclude_list = ifelse(response %in% c(1:7), "include","exclude")) |>
ungroup()
data_selfreport_tidied2 <- data_selfreport_tidied %>%
mutate(response = as.numeric(response))
View(data_selfreport_tidied2)
data_selfreport_tidied2 %>%
count(unique_id, name = "num_trials") %>%
count(num_trials, name = "num_participants")
## Exclude them
data_selfreport_complete <- data_selfreport_tidied2 %>%
count(unique_id, name = "num_trials") %>%
filter(num_trials == 3)
View(data_selfreport_tidied2)
View(data_selfreport_tidied)
View(data_selfreport_raw)
View(data_selfreport_complete)
# removing data
exclude_amp_completeness_raw <- data_selfreport_tidied |>
select(unique_id) |> #for overview, only the respective column is taken
count(unique_id, name = "n_selfreports") |> #count for the number of responses per id
filter(n_selfreports == 3)# #only unique_id's with the correct number of responses are kept (assumed it's 3)
#removing data II
exclude_amp_completeness <- data_selfreport_tidied |>  semi_join(exclude_amp_completeness_raw, by = join_by(unique_id))
#checking data-completness
completness_check <- data_selfreport_tidied |>
count(unique_id, name = "n_trials") |>
count(n_trials, name = "n_participants") |>
arrange(desc(n_participants)) #two participants have only 1 data entry
View(completness_check)
# basic tidying
data_selfreport_tidied <- data_selfreport_raw |>
rename(unique_id = subject,
item_type = trialcode) |>
select(unique_id, item_type, response) |>
filter(item_type != "instructions") |>
mutate(response = case_when(
!is.na(as.numeric(response)) ~ as.numeric(response),
TRUE ~ NA
))
#checking data-completness
completness_check <- data_selfreport_tidied |>
count(unique_id, name = "n_trials") |>
count(n_trials, name = "n_participants") |>
arrange(desc(n_participants)) #two participants have only 1 data entry
View(completness_check)
View(exclude_amp_completeness)
View(data_selfreport_tidied)
View(data_selfreport_tidied)
knitr::opts_chunk$set(message = FALSE,
warning = FALSE)
library(dplyr)
library(tidyr)
library(readr)
library(janitor) # for clean_names()
library(stringr)
# # demographics
# data_demographics_raw_messy <- read_csv("../data/raw/data_demographics_raw_messy.csv", skip = 2) |>
#   janitor::clean_names()
data_demographics_raw <- read_csv("../data/raw/data_demographics_raw.csv") |>
janitor::clean_names()
# self report measure
data_selfreport_raw <- read_csv("../data/raw/data_selfreport_raw.csv") |>
janitor::clean_names()
# affect attribution procedure
data_amp_raw <- read_csv("../data/raw/data_amp_raw.csv") |>
janitor::clean_names()
# do we have duplicate data
data_demographics_raw |>
count(subject) |>
arrange(desc(n))
dat_unique_id <- data_demographics_raw |>
rename(unique_id = subject) |>
count(unique_id) |>
filter(n == 2) |>
select(unique_id)
# wrangle the age data out of the raw
dat_age <- data_demographics_raw |>
# rename for clarity
rename(unique_id = subject, item = trialcode) |>
# select useful columns
select(unique_id, item, response) |>
# retain rows that we need
filter(item == "age") |>
rename(age = response) |>
# remove non-numbers or decimals from age
mutate(age = str_remove_all(age, "[^\\d.]"),  # retains only digits and decimal points
age = na_if(age, ""),
age = as.numeric(age)) |>
select(unique_id, age)
#select(-item) # alternative: negative selection
# wrangle the gender data out of the raw
dat_gender <- data_demographics_raw |>
# rename for clarity
rename(unique_id = subject, item = trialcode) |>
# select useful columns
select(unique_id, item, response) |>
# retain rows that we need
filter(item == "gender") |>
rename(gender = response) |>
# remove non-numbers or decimals from age
mutate(gender = str_to_lower(gender),
gender = str_remove_all(gender, "[\\d.]"),
gender = na_if(gender, ""),
gender = case_when(gender == "woman" ~ "female",
gender == "yes" ~ NA_character_,
gender == "man" ~ "male",
gender == "girl" ~ "female",
gender == "dude" ~ "male",
gender == "non binary" ~ "non-binary",
TRUE ~ gender)) |>
select(unique_id, gender)
# dat_unique_id
# dat_age
# dat_gender
# basic tidying
data_amp_tidied <- data_amp_raw |>
rename(unique_id = subject,
block_type = blockcode,
rt = latency) |>
select(unique_id, block_type, rt) |>
filter(block_type == "test")
# are there duplicates or incomplete data?
data_amp_tidied |>
count(unique_id, name = "n_trials") |>
count(n_trials, name = "n_participants") |>
arrange(desc(n_participants))
data_complete_amp <- data_amp_tidied |>
count(unique_id, name = "n_trials") |>
filter(n_trials == 72)
data_amp_tidied_complete <- data_amp_tidied |>
semi_join(data_complete_amp, by = "unique_id")
# are there duplicates or incomplete data?
# sanity check should have one row
data_amp_tidied_complete |>
count(unique_id, name = "n_trials") |>
count(n_trials, name = "n_participants") |>
arrange(desc(n_participants))
# rm(data_complete_amp) # remove from environment
data_amp_performance_criteria <- data_amp_tidied_complete |>
mutate(fast_trial = ifelse(rt < 100, 1, 0)) |>
# for each participant...
group_by(unique_id) |>
# ... summarize the percent of fast trials
summarise(percent_fast_trials = mean(fast_trial)*100) |>
# flag unique_ids that have too many fast trials
mutate(exclude_amp_performance = ifelse(percent_fast_trials > 10, "exclude", "include"))
#removing data II
exclude_amp_completeness <- data_selfreport_tidied |>  inner_join(exclude_amp_completeness_raw, by = join_by(unique_id))
# basic tidying
data_selfreport_tidied <- data_selfreport_raw |>
rename(unique_id = subject,
item_type = trialcode) |>
select(unique_id, item_type, response) |>
filter(item_type != "instructions") |>
mutate(response = case_when(
!is.na(as.numeric(response)) ~ as.numeric(response),
TRUE ~ NA
))
#checking data-completness
completness_check <- data_selfreport_tidied |>
count(unique_id, name = "n_trials") |>
count(n_trials, name = "n_participants") |>
arrange(desc(n_participants)) #two participants have only 1 data entry
# removing data
exclude_amp_completeness_raw <- data_selfreport_tidied |>
select(unique_id) |> #for overview, only the respective column is taken
count(unique_id, name = "n_selfreports") |> #count for the number of responses per id
filter(n_selfreports == 3)# #only unique_id's with the correct number of responses are kept (assumed it's 3)
#removing data II
exclude_amp_completeness <- data_selfreport_tidied |>  semi_join(exclude_amp_completeness_raw, by = join_by(unique_id))
View(exclude_amp_completeness)
#sanity check
sanity_check <- exclude_amp_completeness |>
count(unique_id, name = "n_selfreports") |>
count(n_selfreports, name = "n_participants") |>
arrange(desc(n_participants))
sanity_check
View(sanity_check)
?semi_join
knitr::opts_chunk$set(message = FALSE,
warning = FALSE)
library(dplyr)
library(tidyr)
library(readr)
library(janitor) # for clean_names()
library(stringr)
# # demographics
# data_demographics_raw_messy <- read_csv("../data/raw/data_demographics_raw_messy.csv", skip = 2) |>
#   janitor::clean_names()
data_demographics_raw <- read_csv("../data/raw/data_demographics_raw.csv") |>
janitor::clean_names()
# self report measure
data_selfreport_raw <- read_csv("../data/raw/data_selfreport_raw.csv") |>
janitor::clean_names()
# affect attribution procedure
data_amp_raw <- read_csv("../data/raw/data_amp_raw.csv") |>
janitor::clean_names()
# do we have duplicate data
data_demographics_raw |>
count(subject) |>
arrange(desc(n))
dat_unique_id <- data_demographics_raw |>
rename(unique_id = subject) |>
count(unique_id) |>
filter(n == 2) |>
select(unique_id)
# wrangle the age data out of the raw
dat_age <- data_demographics_raw |>
# rename for clarity
rename(unique_id = subject, item = trialcode) |>
# select useful columns
select(unique_id, item, response) |>
# retain rows that we need
filter(item == "age") |>
rename(age = response) |>
# remove non-numbers or decimals from age
mutate(age = str_remove_all(age, "[^\\d.]"),  # retains only digits and decimal points
age = na_if(age, ""),
age = as.numeric(age)) |>
select(unique_id, age)
#select(-item) # alternative: negative selection
# wrangle the gender data out of the raw
dat_gender <- data_demographics_raw |>
# rename for clarity
rename(unique_id = subject, item = trialcode) |>
# select useful columns
select(unique_id, item, response) |>
# retain rows that we need
filter(item == "gender") |>
rename(gender = response) |>
# remove non-numbers or decimals from age
mutate(gender = str_to_lower(gender),
gender = str_remove_all(gender, "[\\d.]"),
gender = na_if(gender, ""),
gender = case_when(gender == "woman" ~ "female",
gender == "yes" ~ NA_character_,
gender == "man" ~ "male",
gender == "girl" ~ "female",
gender == "dude" ~ "male",
gender == "non binary" ~ "non-binary",
TRUE ~ gender)) |>
select(unique_id, gender)
# dat_unique_id
# dat_age
# dat_gender
# basic tidying
data_amp_tidied <- data_amp_raw |>
rename(unique_id = subject,
block_type = blockcode,
rt = latency) |>
select(unique_id, block_type, rt) |>
filter(block_type == "test")
# are there duplicates or incomplete data?
data_amp_tidied |>
count(unique_id, name = "n_trials") |>
count(n_trials, name = "n_participants") |>
arrange(desc(n_participants))
data_complete_amp <- data_amp_tidied |>
count(unique_id, name = "n_trials") |>
filter(n_trials == 72)
data_amp_tidied_complete <- data_amp_tidied |>
semi_join(data_complete_amp, by = "unique_id")
# are there duplicates or incomplete data?
# sanity check should have one row
data_amp_tidied_complete |>
count(unique_id, name = "n_trials") |>
count(n_trials, name = "n_participants") |>
arrange(desc(n_participants))
# rm(data_complete_amp) # remove from environment
data_amp_performance_criteria <- data_amp_tidied_complete |>
mutate(fast_trial = ifelse(rt < 100, 1, 0)) |>
# for each participant...
group_by(unique_id) |>
# ... summarize the percent of fast trials
summarise(percent_fast_trials = mean(fast_trial)*100) |>
# flag unique_ids that have too many fast trials
mutate(exclude_amp_performance = ifelse(percent_fast_trials > 10, "exclude", "include"))
#colnames(data_selfreport_raw)
data_selfreport_raw |>
count(response)
# basic tidying
data_selfreport_tidied <- data_selfreport_raw |>
rename(unique_id = subject,
item_type = trialcode) |>
select(unique_id, item_type, response) |>
filter(item_type != "instructions") |>
mutate(response = ifelse(response %in% seq(1,7), response, NA)) |>
mutate(response = as.numeric(response))
data_selfreport_tidied |>
count(response)
class(data_selfreport_tidied$response)
mean(data_selfreport_tidied$response)
data_selfreport_tidied |>
count(response)
# temp <- data_selfreport_tidied |>
#   mutate(response = ifelse(response %in% seq(1,7), response, NA),
#          response = as.numeric(response))
#
# temp <- data_selfreport_tidied |>
#   mutate(response = as.numeric(ifelse(response %in% seq(1,7), response, NA)))
# class(temp$response)
#
# mean(temp$response, na.rm = TRUE)
temp2_summarize <- temp |>
summarize(mean_response = mean(response, na.rm = TRUE))
