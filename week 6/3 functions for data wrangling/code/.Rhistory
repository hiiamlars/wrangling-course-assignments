group_by(unique_id) |>
summarize(mean = mean(response),
sd = sd(response))
mean_and_sd_by_unique_id
#calculating mean and sd overall
mean_and_sd_overall <- data_selfreport_tidy_cleaned |>
summarize(mean = mean(response),
sd = sd(response),
min = min(response),
max = max(response))
mean_and_sd_overall
data_amp_tidy
completness_check <- data_amp_tidy |>
count(unique_id, name = "n_trials") |>
count(n_trials, name = "n_participants")
completness_check
completness_check <- data_amp_tidy |>
count(unique_id, name = "n_trials") |>
count(n_trials, name = "n_participants")
completness_check
#excluding participants with incomplete data
data_amp_tidy_cleaned <- data_amp_tidy |>
group_by(unique_id) |>
mutate(n_trials = n() == 72) |>
filter(n_trials == TRUE)
data_amp_tidy_cleaned
#proportion of prime-congruent trials for each participant
data_amp_tidy |>
group_by(unique_id) |>
summarize(propr_congruent = mean(correct))
#proportion of prime-congruent trials for each participant
propr_congruent <- data_amp_tidy |>
group_by(unique_id) |>
summarize(propr_congruent = mean(correct))
data_amp_tidy
#proportion of prime-congruent trials for each participant
propr_congruent <- data_amp_tidy |>
group_by(unique_id) |>
summarize(propr_congruent = mean(correct)) |>
summarize(pror_fast = mean(fast_trials))
data_amp_tidy
#proportion of prime-congruent trials for each participant
propr_congruent <- data_amp_tidy |>
group_by(unique_id) |>
summarize(propr_congruent = mean(correct)) |>
summarize(pror_fast = mean(fast_trial))
data_amp_tidy
data_amp_tidy_cleaned
View(data_amp_tidy)
View(data_amp_tidy_cleaned)
#proportion of prime-congruent trials for each participant
propr_congruent <- data_amp_tidy_cleaned |>
group_by(unique_id) |>
summarize(propr_congruent = mean(correct),
propr_fast = mean(fast_trial))
#proportion of prime-congruent trials for each participant
propr <- data_amp_tidy_cleaned |>
group_by(unique_id) |>
summarize(propr_congruent = mean(correct),
propr_fast = mean(fast_trial))
rm(pror_congruent)
rm(propr_congruent)
propr
#proportion of prime-congruent and too-fast trials for each participant
propr_congr_and_toofast <- data_amp_tidy_cleaned |>
group_by(unique_id) |>
summarize(propr_congruent = mean(correct),
propr_fast = mean(fast_trial))
rm(propr)
#create exclude variable for more than 10% too fast trials
data_amp_tidy_cleaned_exclude <- data_amp_tidy_cleaned |>
group_by(unique_id) |>
summarize(propr_fast = mean(fast_trial))
data_amp_tidy_cleaned_exclude
#create exclude variable for more than 10% too fast trials
data_amp_tidy_cleaned_exclude <- data_amp_tidy_cleaned |>
group_by(unique_id) |>
summarize(propr_fast = mean(fast_trial)) |>
mutate(exclude_amp = ifelse(propr_fast > 0.1, "exclude", "include"))
data_amp_tidy_cleaned_exclude
#proportion of prime-congruent and too-fast trials for each participant
data_amp_tidy_cleaned_calc <- data_amp_tidy_cleaned |>
group_by(unique_id) |>
summarize(propr_congruent = mean(correct),
propr_fast = mean(fast_trial)) |>
mutate(exclude_amp = ifelse(propr_fast > 0.1, "exclude", "include"))
rm(data_amp_tidy_cleaned_exclude)
rm(propr_congr_and_toofast)
#proportion of participants excluded
propr_excluded <- data_amp_tidy_cleaned_calc |>
mutate(exclude_amp_num = ifelse(exlude_amp = "exclude", 0, 1)) |>
summarize(propr_excluded = mean(exclude_amp_numerical))
View(data_amp_tidy)
View(data_amp_tidy_cleaned_calc)
#proportion of participants excluded
propr_excluded <- data_amp_tidy_cleaned_calc |>
mutate(exclude_amp_num = ifelse(exlude_amp == "exclude", 0, 1)) |>
summarize(propr_excluded = mean(exclude_amp_numerical))
#proportion of participants excluded
propr_excluded <- data_amp_tidy_cleaned_calc |>
mutate(exclude_amp_num = ifelse(exclude_amp == "exclude", 0, 1)) |>
summarize(propr_excluded = mean(exclude_amp_numerical))
#proportion of participants excluded
propr_excluded <- data_amp_tidy_cleaned_calc |>
mutate(exclude_amp_num = ifelse(exclude_amp == "exclude", 0, 1)) |>
summarize(propr_excluded = mean(exclude_amp_num))
propr_excluded
#proportion of participants excluded
propr_excluded <- data_amp_tidy_cleaned_calc |>
mutate(exclude_amp_num = ifelse(exclude_amp == "exclude", 1, 0)) |>
summarize(propr_excluded = mean(exclude_amp_num))
propr_excluded
data_demographics_age_gender_tidy %>%
# calculate M, SD and N for each gender category
group_by(gender) %>%
summarize(mean_age = mean(age, na.rm = TRUE),
mean_age = round_half_up(mean_age, digits = 2),
sd_age = mean(age, na.rm = TRUE),
sd_age = round_half_up(sd_age, digits = 2),
n = n()) %>%
# print nicer table
kable(allign = "r") %>%
kable_classic(full_width = FALSE)
sessionInfo()
knitr::opts_chunk$set(message = FALSE,
warning = FALSE)
library(dplyr)
library(tidyr)
library(readr)
library(janitor) # for clean_names()
library(stringr)
library(knitr)
library(kableExtra)
?read_csv
# demographics data
data_demographics_raw <- read_csv(file = "../data/raw/data_demographics_raw.csv")
# self report measure data
data_selfreport_raw <- read_csv(file = "../data/raw/data_selfreport_raw.csv")
# affect attribution procedure data
data_amp_raw <- read_csv(file = "../data/raw/data_amp_raw.csv")
nrow(data_demographics_raw)
nrow(data_selfreport_raw)
nrow(data_amp_raw)
# use a function without the pipe
example_without_pipe <- clean_names(data_demographics_raw)
# use a function with the pipe.
example_with_pipe <- data_demographics_raw %>%
clean_names()
# check they produce identical results
identical(example_without_pipe, example_with_pipe)
# use a function without the pipe
example_without_pipe <- clean_names(data_demographics_raw)
# use a function with the pipe. the output of what is left of the pipe is used as the input to the right of the pipe, usually as the first argument or the data argument.
example_with_pipe <- data_demographics_raw %>%
clean_names()
# check they produce identical results
identical(example_without_pipe, example_with_pipe)
# use a series of functions without the pipe
example2_without_pipe <- summarise(group_by(mutate(rename(clean_names(dat = data_amp_raw), unique_id = subject, block = blockcode, trial_type = trialcode, rt = latency), fast_trial = ifelse(rt < 100, 1, 0)), unique_id), percent_fast_trials = mean(fast_trial)*100)
# use a series of functions with the pipe
example2_with_pipe <- data_amp_raw %>%
# clean the column names
clean_names() %>%
# rename the columns
rename(unique_id = subject,
block = blockcode,
trial_type = trialcode,
rt = latency) %>%
# create a new variable using existing ones
mutate(fast_trial = ifelse(rt < 100, 1, 0)) %>%
# summarize across trials for each participant
group_by(unique_id) %>%
summarise(percent_fast_trials = mean(fast_trial)*100)
# check they produce identical results
identical(example2_without_pipe, example2_with_pipe)
data_demographics_clean_names <- data_demographics_raw |>
clean_names()
data_selfreport_clean_names <- data_selfreport_raw |>
clean_names()
data_amp_clean_names <- data_amp_raw |>
clean_names()
# print all column names
colnames(data_demographics_clean_names)
# print all column names as a vector
dput(colnames(data_demographics_clean_names))
# print all column names as a vector using the pipe
data_demographics_clean_names %>%
colnames() %>%
dput()
#data_selfreport_clean_names
# print all column names
colnames(data_selfreport_clean_names)
# print all column names as a vector
dput(colnames(data_selfreport_clean_names))
# print all column names as a vector using the pipe
data_selfreport_clean_names %>%
colnames() %>%
dput()
#data_amp_clean_names
# print all column names
colnames(data_amp_clean_names)
# print all column names as a vector
dput(colnames(data_amp_clean_names))
# print all column names as a vector using the pipe
data_amp_clean_names %>%
colnames() %>%
dput()
data_demographics_renamed <- data_demographics_clean_names %>%
rename(unique_id = subject,
item = trialcode)
data_selfreport_renamed <- data_selfreport_clean_names %>%
rename(unique_id = subject,
item = trialcode)
data_amp_renamed <- data_amp_clean_names %>%
rename(unique_id = subject,
block = blockcode,
trial_type = trialcode)
data_demographics_selected_columns <- data_demographics_renamed %>%
select(unique_id, item, response)
data_selfreport_selected_columns <- data_selfreport_renamed %>%
select(unique_id, item, response)
data_amp_selected_columns <- data_amp_renamed %>%
select(unique_id, block, trial_type, correct, latency)
# remove all objects in environment
rm(list = ls())
data_demographics_trimmed <- read_csv("../data/raw/data_demographics_raw.csv") %>%
clean_names() %>%
rename(unique_id = subject,
item = trialcode) %>%
select(unique_id, item, response)
data_selfreport_trimmed <- read_csv("../data/raw/data_selfreport_raw.csv") %>%
clean_names() %>%
rename(unique_id = subject,
item = trialcode) %>%
select(unique_id, item, response)
data_amp_trimmed <- read_csv("../data/raw/data_amp_raw.csv") %>%
clean_names() %>%
rename(unique_id = subject,
block = blockcode,
trial_type = trialcode) %>%
select(unique_id, block, trial_type, correct, latency)
data_demographics_trimmed %>%
count(item)
data_demographics_trimmed %>%
count(response)
data_selfreport_trimmed %>%
count(item)
data_selfreport_trimmed %>%
count(response)
data_amp_trimmed %>%
count(block)
data_amp_trimmed %>%
count(trial_type)
data_amp_trimmed %>%
count(correct)
data_amp_trimmed %>%
count(latency)
data_demographics_trimmed %>%
count(item, response)
data_demographics_trimmed %>%
count(item, response) %>%
arrange(desc(n)) # arrange in descending order
# example using equivalence
example_equivalence <- data_amp_trimmed %>%
filter(block == "test")
# example using negation
example_negation <- data_selfreport_trimmed %>%
filter(item != "instructions")
# example using membership
example_membership <- data_selfreport_trimmed %>%
filter(item %in% c("positive", "prefer", "like"))
example_multiple_criteria_1 <- data_amp_trimmed %>%
filter(block != "test" & correct == 1)
example_multiple_criteria_2 <- data_amp_trimmed %>%
filter(block != "test" | correct == 1)
# note that these provide different results - make sure you understand why
identical(example_multiple_criteria_1, example_multiple_criteria_2)
data_selfreport_trials <- data_selfreport_trimmed %>%
filter(item %in% c("positive", "prefer", "like"))
data_amp_test_trials <- data_amp_trimmed %>%
filter(block == "test" & trial_type != "instructions")
# mutating new variables
example_1 <- data_amp_test_trials %>%
mutate(latency_plus_1 = latency + 1)
example_2 <- data_amp_test_trials %>%
mutate(log_latency = log(latency))
# mutating the contents of existing variables
example_3 <- data_amp_test_trials %>%
mutate(latency = latency / 1000) # latency is now in seconds rather than milliseconds
# illustrate the problem with the gender responses:
data_demographics_trimmed %>%
# filter only the gender item, not age
filter(item == "gender") %>%
count(response) %>%
arrange(desc(n))
# clean up the gender variable
data_demographics_gender_tidy_1 <- data_demographics_trimmed %>%
# filter only the gender item, not age
filter(item == "gender") %>%
# change the name of the response variable to what it now represents: gender
rename(gender = response) %>%
# change or remove weird responses to the gender question
mutate(gender = str_to_lower(gender)) %>%
mutate(gender = str_remove_all(gender, "[\\d.]")) %>% # remove everything except letters
mutate(gender = na_if(gender, "")) %>%
mutate(gender = case_when(gender == "woman" ~ "female",
gender == "man" ~ "male",
gender == "girl" ~ "female",
gender == "yes" ~ NA_character_,
gender == "dude" ~ "male",
gender == "non binary" ~ "non-binary",
TRUE ~ gender)) %>%
# select only the columns of interest
select(unique_id, gender)
# illustrate the data after cleaning:
data_demographics_gender_tidy_1 %>%
count(gender) %>%
arrange(desc(n))
# clean up the gender variable
data_demographics_gender_tidy_2 <- data_demographics_trimmed %>%
# filter only the gender item, not age
filter(item == "gender") %>%
# change the name of the response variable to what it now represents: gender
rename(gender = response) %>%
# change or remove weird responses to the gender question
mutate(gender = str_to_lower(gender),
gender = str_remove_all(gender, "[\\d.]"), # remove everything except letters
gender = na_if(gender, ""),
gender = case_when(gender == "woman" ~ "female",
gender == "man" ~ "male",
gender == "girl" ~ "female",
gender == "yes" ~ NA_character_,
gender == "dude" ~ "male",
gender == "non binary" ~ "non-binary",
TRUE ~ gender)) %>%
# select only the columns of interest
select(unique_id, gender)
# check they are identical
identical(data_demographics_gender_tidy_1, data_demographics_gender_tidy_2)
data_amp_test_trials_with_fast_trials <- data_amp_test_trials %>%
mutate(fast_trial = latency < 100)
# what values are present?
data_demographics_trimmed %>%
filter(item == "age") %>%
count(response)
# fix them with mutate
data_demographics_age_tidy <- data_demographics_trimmed %>%
filter(item == "age") %>%
mutate(response = ifelse(response == "old", NA, response),
response = as.numeric(response)) %>%
select(unique_id, age = response) # note that you can rename inside a select call
# check this has fixed the issue
data_demographics_age_tidy %>%
count(age)
# what values are present? Numerical values and one entry "Ctrl+B"
data_selfreport_trials %>%
count(response)
# what type of data is the response column? At the moment the column has the type "character"
class(data_selfreport_trials$response)
# remove non Likert values
data_selfreport_tidy <- data_selfreport_trials %>%
mutate(response = ifelse(response %in% c("1", "2", "3", "4", "5", "6", "7"), response, NA),
response = as.numeric(response))
# show the data after changes
data_selfreport_tidy %>%
count(response)
class(data_selfreport_tidy$response)
data_selfreport_tidy <- data_selfreport_trials %>%
mutate(response = case_when(
response == "1" | response == "2" | response =="3" |
response == "4" | response == "5" | response == "6" |
response == "7" ~ as.numeric(response),
TRUE ~ NA_real_))
data_amp_tidy <- data_amp_test_trials_with_fast_trials %>%
mutate(correct = case_when(trial_type == "prime_positive" ~ correct,
trial_type == "prime_negative" & correct == 0 ~ 1,
trial_type == "prime_negative" & correct == 1 ~ 0))
# you can also specify a default value to return if none of the logical tests are passed with 'TRUE ~':
data_amp_tidy <- data_amp_test_trials_with_fast_trials %>%
mutate(correct = case_when(trial_type == "prime_negative" & correct == 0 ~ 1,
trial_type == "prime_negative" & correct == 1 ~ 0,
TRUE ~ correct))
round(0.5)
round(1.5)
round(2.5)
round(3.5)
round(4.5)
round(5.5)
round_half_up(0.5)
round_half_up(1.5)
round_half_up(2.5)
round_half_up(3.5)
round_half_up(4.5)
round_half_up(5.5)
# mean
data_demographics_age_tidy %>%
summarize(mean_age = mean(age, na.rm = TRUE))
# SD
data_demographics_age_tidy %>%
summarize(sd_age = sd(age, na.rm = TRUE))
# mean and SD with rounding, illustrating how multiple summarizes can be done in one function call
data_demographics_age_tidy %>%
summarize(mean_age = mean(age, na.rm = TRUE),
mean_age = round_half_up(mean_age, digits = 2),
sd_age = sd(age, na.rm = TRUE),
sd_age = round_half_up(sd_age, digits = 2))
# # this code creates data needed for this example - you can simply load the data from disk and skip over this commented-out code. we will come back to things like 'joins' later
# data_demographics_unique_participant_codes <- data_demographics_trimmed %>%
#   count(unique_id) %>%
#   filter(n == 2)
#
# data_demographics_age_gender_tidy <- data_demographics_trimmed %>%
#   semi_join(data_demographics_unique_participant_codes, by = "unique_id") %>%
#   pivot_wider(names_from = "item",
#               values_from = "response") %>%
#   mutate(age = ifelse(age == "old", NA, age),
#          age = as.numeric(age),
#          gender = tolower(gender),
#          gender = stringr::str_remove_all(gender, regex("\\W+")), # regex is both very useful and awful to write
#          gender = case_when(gender == "female" ~ gender,
#                             gender == "male" ~ gender,
#                             gender == "nonbinary" ~ gender,
#                             gender == "woman" ~ "female",
#                             gender == "man" ~ "male"))
#
# dir.create("../data/processed")
# write_csv(data_demographics_age_gender_tidy, "../data/processed/data_demographics_age_gender_tidy.csv")
# load suitable example data from disk
data_demographics_age_gender_tidy <- read_csv("../data/processed/data_demographics_age_gender_tidy.csv") #directory changed
# illustrate use of group_by() and summarize()
data_demographics_age_gender_tidy %>%
group_by(gender) %>%
summarize(mean_age = mean(age, na.rm = TRUE))
# summarize n
data_demographics_age_gender_tidy %>%
summarize(n_age = n())
# summarize n per gender group
data_demographics_age_gender_tidy %>%
group_by(gender) %>%
summarize(n_age = n())
# summarize n
data_demographics_age_gender_tidy %>%
count()
# summarize n per gender group
data_demographics_age_gender_tidy %>%
count(gender)
data_demographics_age_tidy %>%
summarize(proportion_less_than_25 = mean(age < 25, na.rm = TRUE))
# using the mtcars dataset that is built in to {dplyr}, ...
mtcars %>%
# ... calculate the mean of every numeric column in the dataset ...
summarise(across(where(is.numeric), mean, na.rm = TRUE)) %>%
# ... and then round every column to one decimal place
mutate(across(everything(), round_half_up, digits = 1))
#check for particiapants with incomplete data
completness_check <- data_selfreport_tidy |>
count(unique_id, name = "n_trials") |>
count(n_trials, name = "n_participants")
completness_check
#excluding participants with incomplete data
data_selfreport_tidy_cleaned <- data_selfreport_tidy |>
group_by(unique_id) |>
mutate(n_trials = n() == 3) |>
filter(n_trials == TRUE)
data_selfreport_tidy_cleaned
#calculating mean and sd per unique id
mean_and_sd_by_unique_id <- data_selfreport_tidy_cleaned |>
group_by(unique_id) |>
summarize(mean = mean(response),
sd = sd(response),
min = min(response),
max = max(response))
#calculating mean and sd overall
mean_and_sd_overall <- data_selfreport_tidy_cleaned |>
summarize(mean = mean(response),
sd = sd(response),
min = min(response),
max = max(response))
#checking for participants with incomplete data
completness_check <- data_amp_tidy |>
count(unique_id, name = "n_trials") |>
count(n_trials, name = "n_participants")
completness_check
#excluding participants with incomplete data
data_amp_tidy_cleaned <- data_amp_tidy |>
group_by(unique_id) |>
mutate(n_trials = n() == 72) |>
filter(n_trials == TRUE)
data_amp_tidy_cleaned
#proportion of prime-congruent and too-fast trials for each participant
data_amp_tidy_cleaned_calc <- data_amp_tidy_cleaned |>
group_by(unique_id) |>
summarize(propr_congruent = mean(correct),
propr_fast = mean(fast_trial)) |>
mutate(exclude_amp = ifelse(propr_fast > 0.1, "exclude", "include"))
#proportion of participants excluded
propr_excluded <- data_amp_tidy_cleaned_calc |>
mutate(exclude_amp_num = ifelse(exclude_amp == "exclude", 1, 0)) |>
summarize(propr_excluded = mean(exclude_amp_num))
propr_excluded
data_demographics_age_gender_tidy %>%
# calculate M, SD and N for each gender category
group_by(gender) %>%
summarize(mean_age = mean(age, na.rm = TRUE),
mean_age = round_half_up(mean_age, digits = 2),
sd_age = mean(age, na.rm = TRUE),
sd_age = round_half_up(sd_age, digits = 2),
n = n()) %>%
# print nicer table
kable(allign = "r") %>%
kable_classic(full_width = FALSE)
sessionInfo()
